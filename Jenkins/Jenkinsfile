pipeline {
    agent any

    environment {
        SQLITE_DB_PATH = 'crud/db.sqlite3'
    }

     stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                git 'https://github.com/BS-PMC-2024/BS-PMC-2024-Team30.git'
            }
        }

        stage('Setup') {
            steps {
                script {
                    docker.image('python:3.12-alpine').inside {
                        sh '''
                        cd crud
                        # Install dependencies
                        python -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt
                        '''
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    docker.image('python:3.12-alpine').inside {
                        sh '''
                        cd crud
                        # Compile python files to check for syntax errors
                        python -m py_compile manage.py
                        '''
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    docker.image('python:3.12-alpine').inside {
                        sh '''
                        cd crud
                        . venv/bin/activate
                        # Run your tests
                        pytest --junit-xml test-reports/results.xml
                        '''
                    }
                }
            }
            post {
                always {
                    // Archive test results
                    junit 'test-reports/results.xml'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                     docker.image('python:3.12-alpine').inside {
                        sh '''
                        cd crud
                        # Build Docker image
                        docker build -t reqgenius:${env.BUILD_ID} .
                        '''
                        def dockerImage = docker.image("reqgenius:${env.BUILD_ID}")
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials-id') {
                            dockerImage.push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}